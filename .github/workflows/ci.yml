name: ci

on: [push, pull_request]

jobs:
  ci:
    name: Linux Swoole-${{ matrix.swoole.version }} RoadRunner-${{ matrix.roadrunner }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        swoole:
          - version: 5.0-php8.1
            postgresql_version: ""
          - version: 5.0-php8.0
            postgresql_version: ""
          - version: 4.8-php8.1
            postgresql_version: ""
          - version: 4.8-php8.0
            postgresql_version: "v4.8.0"
          - version: 4.8-php7.4
            postgresql_version: "v4.8.0"
          - version: 4.7-php8.0
            postgresql_version: f5eda17f89d160d0a89ac7c5db4636bdaefd48e6
          - version: 4.7-php7.4
            postgresql_version: f5eda17f89d160d0a89ac7c5db4636bdaefd48e6
        roadrunner: [2.7.*]
    env:
      ENV_SERVICE: swoole
      POSTGRESQL_VERSION: ${{ matrix.swoole.postgresql_version }}
      SWOOLE_DOCKER_VERSION: ${{ matrix.swoole.version }}
      MYSQL_DOCKER_VERSION: "8.0"
      REDIS_SERVER_HOST: redis
      ROADRUNNER_DOCKER_VERSION: ${{ matrix.roadrunner }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: /tmp/composer
          key: ${{ runner.os }}-composer-${{ matrix.swoole.version }}-${{ hashFiles('/composer.json') }}
      - name: Prepare
        uses: ./.github/actions/ci-prepare
        with:
          env: ${{ env.ENV_SERVICE }}
      - name: Test
        run: docker exec ${ENV_SERVICE} composer test
      - name: Test swoole
        run: docker exec ${ENV_SERVICE} composer test-swoole
      - name: Test workerman
        run: docker exec ${ENV_SERVICE} composer test-workerman
      - name: Test workerman-gateway
        run: docker exec ${ENV_SERVICE} composer test-workerman-gateway
      - name: Test roadrunner
        run: docker exec ${ENV_SERVICE} composer test-roadrunner
      - name: Test fpm
        run: docker exec ${ENV_SERVICE} composer test-fpm
      - name: Test jwt
        run: docker exec ${ENV_SERVICE} composer test-jwt
      - name: Test queue
        run: docker exec ${ENV_SERVICE} composer test-queue
      - name: Test amqp
        run: docker exec ${ENV_SERVICE} composer test-amqp
      - name: Test kafka
        run: docker exec ${ENV_SERVICE} composer test-kafka
      - name: Test grpc
        run: docker exec ${ENV_SERVICE} composer test-grpc
      - name: Test snowflake
        run: docker exec ${ENV_SERVICE} composer test-snowflake
      - name: Test mqtt
        run: docker exec ${ENV_SERVICE} composer test-mqtt
      - name: Test smarty
        run: docker exec ${ENV_SERVICE} composer test-smarty
      - name: Test pgsql
        if: matrix.swoole.version != '5.0-php8.1' && matrix.swoole.version != '5.0-php8.0'
        run: docker exec ${ENV_SERVICE} composer test-pgsql
      - name: Print logs
        if: failure()
        run: docker exec ${ENV_SERVICE} php .github/print-logs.php

  ci-unix:
    name: Linux Swoole-${{ matrix.swoole.version }} RoadRunner-${{ matrix.roadrunner }} With Redis UnixSocket
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        swoole:
          - version: 4.7-php8.0
            postgresql_version: f5eda17f89d160d0a89ac7c5db4636bdaefd48e6
        roadrunner: [2.7.*]
    env:
      ENV_SERVICE: swoole
      POSTGRESQL_VERSION: ${{ matrix.swoole.postgresql_version }}
      SWOOLE_DOCKER_VERSION: ${{ matrix.swoole.version }}
      MYSQL_DOCKER_VERSION: "8.0"
      REDIS_SERVER_HOST: /tmp/docker/redis.sock
      ROADRUNNER_DOCKER_VERSION: ${{ matrix.roadrunner }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: /tmp/composer
          key: ${{ runner.os }}-composer-${{ matrix.swoole.version }}-${{ hashFiles('/composer.json') }}
      - name: Prepare
        uses: ./.github/actions/ci-prepare
        with:
          env: ${{ env.ENV_SERVICE }}
      - name: Test
        run: docker exec ${ENV_SERVICE} composer test
      - name: Test swoole
        run: docker exec ${ENV_SERVICE} composer test-swoole
      - name: Test workerman
        run: docker exec ${ENV_SERVICE} composer test-workerman
      - name: Test workerman-gateway
        run: docker exec ${ENV_SERVICE} composer test-workerman-gateway
      - name: Test roadrunner
        run: docker exec ${ENV_SERVICE} composer test-roadrunner
      - name: Test fpm
        run: docker exec ${ENV_SERVICE} composer test-fpm
      - name: Test jwt
        run: docker exec ${ENV_SERVICE} composer test-jwt
      - name: Test queue
        run: docker exec ${ENV_SERVICE} composer test-queue
      - name: Test amqp
        run: docker exec ${ENV_SERVICE} composer test-amqp
      - name: Test kafka
        run: docker exec ${ENV_SERVICE} composer test-kafka
      - name: Test grpc
        run: docker exec ${ENV_SERVICE} composer test-grpc
      - name: Test snowflake
        run: docker exec ${ENV_SERVICE} composer test-snowflake
      - name: Test mqtt
        run: docker exec ${ENV_SERVICE} composer test-mqtt
      - name: Test smarty
        run: docker exec ${ENV_SERVICE} composer test-smarty
      - name: Test pgsql
        run: docker exec ${ENV_SERVICE} composer test-pgsql
      - name: Print logs
        if: failure()
        run: docker exec ${ENV_SERVICE} php .github/print-logs.php

  ci-swoole-cli:
    name: Swoole-cli-${{ matrix.swoole-cli }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        swoole-cli: [v5.0.0, v4.8.11]
    env:
      MYSQL_SERVER_PASSWORD: "root"
      IMI_TEST_AMQP_SERVER_UTIL: 0
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup MySQL
        uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: "8.0"
          root-password: root
          my-cnf: |
            socket=/tmp/mysql.sock
      - name: Setup Redis
        uses: shogo82148/actions-setup-redis@v1
        with:
          redis-version: "6.x"
      - name: Setup swoole-cli
        run: .github/script/install-swoole-cli.sh ${{ matrix.swoole-cli }}
      - name: Check Version
        run: |
          swoole-cli -v
          php -v
          php -m
          composer -V
          php --ri swoole
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ matrix.swoole-cli }}-${{ hashFiles('/composer.json') }}
      - name: Prepare
        run: |
          mysql -uroot -proot -e 'CREATE DATABASE IF NOT EXISTS db_imi_test;'
          composer update --prefer-dist --no-progress
          tests/db/install-db.sh

      - name: Test
        run: composer test
      - name: Test swoole
        run: composer test-swoole
      - name: Test workerman
        run: composer test-workerman
      - name: Test workerman-gateway
        run: composer test-workerman-gateway
      - name: Test jwt
        run: composer test-jwt
      - name: Test queue
        run: composer test-queue
      - name: Test grpc
        run: composer test-grpc
      - name: Test snowflake
        run: composer test-snowflake
      - name: Test mqtt
        run: composer test-mqtt
      - name: Test smarty
        run: composer test-smarty
      - name: Print logs
        if: failure()
        run: php .github/print-logs.php

  ci-macos:
    name: MacOS PHP-${{ matrix.php }} Swoole-${{ matrix.swoole }} RoadRunner-${{ matrix.roadrunner }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        php: [7.4, "8.0", "8.1"]
        swoole: [v5.0.0, v4.8.11]
        roadrunner: [2.7.*]
        exclude:
          - php: 7.4
            swoole: v5.0.0

    env:
      MYSQL_SERVER_PASSWORD: "root"
      PHP_VERSION: ${{ matrix.php }}
      IMI_TEST_AMQP_SERVER_UTIL: 0
      IMI_ROADRUNNER_BINARY: ${{ github.workspace }}/rr
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ROADRUNNER_DOCKER_VERSION: ${{ matrix.roadrunner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup MySQL
        uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: "8.0"
          root-password: root
          my-cnf: |
            socket=/tmp/mysql.sock
      - name: Setup Redis
        uses: shogo82148/actions-setup-redis@v1
        with:
          redis-version: "6.x"
      - name: Get Openssl Dir
        id: opecssl-dir
        run: echo "::set-output name=path::$(brew --prefix openssl@1.1)"
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl
          extensions: >
            apcu, bcmath, curl, openssl, mbstring, intl, json, redis, mysqli, pdo, pdo_mysql, sockets, zip,
            swoole-swoole/swoole-src@${{ matrix.swoole }}
        env:
          SWOOLE_CONFIGURE_OPTS: >
            --enable-openssl
            --with-openssl-dir=${{ steps.opecssl-dir.outputs.path }}
            --enable-http2
            --enable-mysqlnd
            --enable-swoole-json
            --enable-swoole-curl
      - name: Check Version
        run: |
          php -v
          php -m
          composer -V
          php --ri swoole
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ env.php-versions }}-${{ hashFiles('/composer.json') }}
      - name: Prepare
        run: |
          mysql -uroot -proot -e 'CREATE DATABASE IF NOT EXISTS db_imi_test;'
          composer update --prefer-dist --no-progress
          tests/db/install-db.sh

      - name: Install RoadRunner
        run: |
          echo no | src/Components/roadrunner/vendor/bin/rr get-binary -f $ROADRUNNER_DOCKER_VERSION
          ./rr -v

      - name: Test
        run: composer test
      - name: Test swoole
        run: composer test-swoole
      - name: Test workerman
        run: composer test-workerman
      - name: Test workerman-gateway
        run: composer test-workerman-gateway
      - name: Test roadrunner
        run: composer test-roadrunner
      - name: Test fpm
        run: composer test-fpm
      - name: Test jwt
        run: composer test-jwt
      - name: Test queue
        run: composer test-queue
      - name: Test grpc
        run: composer test-grpc
      - name: Test snowflake
        run: composer test-snowflake
      - name: Test mqtt
        run: composer test-mqtt
      - name: Test smarty
        run: composer test-smarty
      - name: Print logs
        if: failure()
        run: php .github/print-logs.php

  ci-windows:
    name: Windows PHP-${{ matrix.php }} RoadRunner-${{ matrix.roadrunner }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        php: [7.4, "8.0", 8.1]
        roadrunner: [2.7.*]

    env:
      IMI_ROADRUNNER_BINARY: ${{ github.workspace }}\rr.exe
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ROADRUNNER_DOCKER_VERSION: ${{ matrix.roadrunner }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup MySQL
        uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: "8.0"
          root-password: root

      - name: Setup Redis-server
        run: |
          nuget install redis-64 -excludeversion
          redis-64\tools\redis-server.exe --service-install
          redis-64\tools\redis-server.exe --service-start
          '@ECHO Redis Started'

      - name: Setup PHP
        uses: shivammathur/setup-php@verbose
        with:
          php-version: ${{ matrix.php }}
          ini-values: session.save_path=C:\temp
          tools: pecl
          extensions: apcu, bcmath, curl, openssl, mbstring, intl, json, redis, mysqli, pdo, pdo_mysql, sockets
        env:
          fail-fast: true

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ env.php-versions }}-${{ hashFiles('/composer.json') }}

      - name: Prepare
        run: |
          mysql -uroot -proot -e 'CREATE DATABASE IF NOT EXISTS db_imi_test;'
          composer update --prefer-dist --no-progress
          php src\Cli\bin\imi-cli generate/table --app-namespace "Imi\Test\Component"

      - name: Install RoadRunner
        run: |
          echo no | src\Components\roadrunner\vendor\bin\rr get-binary -f $env:ROADRUNNER_DOCKER_VERSION
          .\rr -v

      - name: Test
        run: composer test
      - name: Test fpm
        run: composer test-fpm
      - name: Test workerman
        run: composer test-workerman
      - name: Test workerman-gateway
        run: composer test-workerman-gateway-w
      - name: Test roadrunner
        run: composer test-roadrunner
      - name: Test jwt
        if: ${{ env.test_prepared && always() }}
        run: composer test-jwt
      - name: Test snowflake
        if: ${{ env.test_prepared && always() }}
        run: composer test-snowflake
      - name: Print logs
        if: failure()
        run: php .github\print-logs.php
